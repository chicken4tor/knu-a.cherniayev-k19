// 1, 5, 7, 14, 18, 21, 22

#include <iostream>
#include <vector>


using namespace std;


// 1. Структурау даних для опису дерева з довільною кількістю «дітей».
//    У вузлах дерева зберігаються цілі числа.
struct TreeNode
{
    int data{};

    vector<TreeNode *> children;
};


// 4. Додавання елемента до довільного дерева.
//    Передається значення нового елемента та вірогідність p.
//    З вірогідністю p новий елемент додається як дитина заданого вузла,
//    з вірогідністю 1-p додається за тою самою процедурою до одного з дітей
//    даного вузла (один з дітей обирається з однаковою вірогідністю).
void add_proc(TreeNode *node, double p)
{
    ;
}


// 5. Реалізувати функції для обчислення наступних параметрів вузла дерева:

// кількість дітей;
int children_count(TreeNode *node)
{
    return node->children.size();
}

// висота під-дерева, що починається з даного вузла;
int tree_length(TreeNode *node)
{
    return -1;
}

// кількість вузлів у під-дереві, що починається з даного вузла.
int total_count(TreeNode *node)
{
    return -1;
}

// 7. Реалізувати функцію для виводу дерева з використанням дужок для дітей.
void print_tree(TreeNode *node)
{

}

// 14. Реалізувати функцію для видалення елементу з довільного дерева.
//     Передається значення елементу (якщо є кілька елементів з
//     таким значенням – видаляється будь-який один вузол).
//     Повертається видалене під-дерево.

TreeNode * delete_node(TreeNode *node, int value)
{
    return nullptr;
}

// 18. Реалізувати структуру даних для опису бінарного дерева.
//     Реалізувати функцію для додавання елементів відповідно
//     до значення (менші значення наліво, всі інші направо).

struct BinaryNode
{
    int data{};

    BinaryNode *left{};
    BinaryNode *right{};
};


void add_element(BinaryNode *node, int value)
{}

// 21. Побудувати з бінарного дерева послідовне подання на основі прямого порядку.


// 22. Реалізувати дерево для подання арифметичних виразів.
//     Підтримуються константи та змінні, а також операції +, -, *, /, піднесення до степеню.
//     Реалізувати спрощення виразів, обчислення константних підвиразів,
//     пошук помилок (наприклад, ділення на 0).
//     Реалізувати обчислення значення виразу для заданих значень змінних.
//     Реалізувати вивід виразу у звичайній математичній нотації з мінімальною кількістю дужок.

int main()
{}
